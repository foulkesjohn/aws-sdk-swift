// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

/// Error enum for Organizations
public enum OrganizationsErrorType: AWSErrorType {
    case accessDeniedException(message: String?)
    case accountNotFoundException(message: String?)
    case aWSOrganizationsNotInUseException(message: String?)
    case concurrentModificationException(message: String?)
    case constraintViolationException(message: String?)
    case invalidInputException(message: String?)
    case masterCannotLeaveOrganizationException(message: String?)
    case serviceException(message: String?)
    case tooManyRequestsException(message: String?)
    case handshakeNotFoundException(message: String?)
    case invalidHandshakeTransitionException(message: String?)
    case handshakeAlreadyInStateException(message: String?)
    case finalizingOrganizationException(message: String?)
    case duplicatePolicyException(message: String?)
    case malformedPolicyDocumentException(message: String?)
    case policyNotFoundException(message: String?)
    case policyTypeNotEnabledException(message: String?)
    case rootNotFoundException(message: String?)
    case duplicateOrganizationalUnitException(message: String?)
    case organizationalUnitNotFoundException(message: String?)
    case sourceParentNotFoundException(message: String?)
    case destinationParentNotFoundException(message: String?)
    case duplicateAccountException(message: String?)
    case policyTypeNotAvailableForOrganizationException(message: String?)
    case parentNotFoundException(message: String?)
    case policyTypeAlreadyEnabledException(message: String?)
    case policyNotAttachedException(message: String?)
    case targetNotFoundException(message: String?)
    case alreadyInOrganizationException(message: String?)
    case accessDeniedForDependencyException(message: String?)
    case childNotFoundException(message: String?)
    case duplicatePolicyAttachmentException(message: String?)
    case organizationNotEmptyException(message: String?)
    case handshakeConstraintViolationException(message: String?)
    case createAccountStatusNotFoundException(message: String?)
    case policyInUseException(message: String?)
    case accountOwnerNotVerifiedException(message: String?)
    case duplicateHandshakeException(message: String?)
    case organizationalUnitNotEmptyException(message: String?)
}

extension OrganizationsErrorType {
    public init?(errorCode: String, message: String?){
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AccessDeniedException":
            self = .accessDeniedException(message: message)
        case "AccountNotFoundException":
            self = .accountNotFoundException(message: message)
        case "AWSOrganizationsNotInUseException":
            self = .aWSOrganizationsNotInUseException(message: message)
        case "ConcurrentModificationException":
            self = .concurrentModificationException(message: message)
        case "ConstraintViolationException":
            self = .constraintViolationException(message: message)
        case "InvalidInputException":
            self = .invalidInputException(message: message)
        case "MasterCannotLeaveOrganizationException":
            self = .masterCannotLeaveOrganizationException(message: message)
        case "ServiceException":
            self = .serviceException(message: message)
        case "TooManyRequestsException":
            self = .tooManyRequestsException(message: message)
        case "HandshakeNotFoundException":
            self = .handshakeNotFoundException(message: message)
        case "InvalidHandshakeTransitionException":
            self = .invalidHandshakeTransitionException(message: message)
        case "HandshakeAlreadyInStateException":
            self = .handshakeAlreadyInStateException(message: message)
        case "FinalizingOrganizationException":
            self = .finalizingOrganizationException(message: message)
        case "DuplicatePolicyException":
            self = .duplicatePolicyException(message: message)
        case "MalformedPolicyDocumentException":
            self = .malformedPolicyDocumentException(message: message)
        case "PolicyNotFoundException":
            self = .policyNotFoundException(message: message)
        case "PolicyTypeNotEnabledException":
            self = .policyTypeNotEnabledException(message: message)
        case "RootNotFoundException":
            self = .rootNotFoundException(message: message)
        case "DuplicateOrganizationalUnitException":
            self = .duplicateOrganizationalUnitException(message: message)
        case "OrganizationalUnitNotFoundException":
            self = .organizationalUnitNotFoundException(message: message)
        case "SourceParentNotFoundException":
            self = .sourceParentNotFoundException(message: message)
        case "DestinationParentNotFoundException":
            self = .destinationParentNotFoundException(message: message)
        case "DuplicateAccountException":
            self = .duplicateAccountException(message: message)
        case "PolicyTypeNotAvailableForOrganizationException":
            self = .policyTypeNotAvailableForOrganizationException(message: message)
        case "ParentNotFoundException":
            self = .parentNotFoundException(message: message)
        case "PolicyTypeAlreadyEnabledException":
            self = .policyTypeAlreadyEnabledException(message: message)
        case "PolicyNotAttachedException":
            self = .policyNotAttachedException(message: message)
        case "TargetNotFoundException":
            self = .targetNotFoundException(message: message)
        case "AlreadyInOrganizationException":
            self = .alreadyInOrganizationException(message: message)
        case "AccessDeniedForDependencyException":
            self = .accessDeniedForDependencyException(message: message)
        case "ChildNotFoundException":
            self = .childNotFoundException(message: message)
        case "DuplicatePolicyAttachmentException":
            self = .duplicatePolicyAttachmentException(message: message)
        case "OrganizationNotEmptyException":
            self = .organizationNotEmptyException(message: message)
        case "HandshakeConstraintViolationException":
            self = .handshakeConstraintViolationException(message: message)
        case "CreateAccountStatusNotFoundException":
            self = .createAccountStatusNotFoundException(message: message)
        case "PolicyInUseException":
            self = .policyInUseException(message: message)
        case "AccountOwnerNotVerifiedException":
            self = .accountOwnerNotVerifiedException(message: message)
        case "DuplicateHandshakeException":
            self = .duplicateHandshakeException(message: message)
        case "OrganizationalUnitNotEmptyException":
            self = .organizationalUnitNotEmptyException(message: message)
        default:
            return nil
        }
    }
}
