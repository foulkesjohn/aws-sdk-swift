// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

/// Error enum for KinesisVideo
public enum KinesisVideoErrorType: AWSErrorType {
    case clientLimitExceededException(message: String?)
    case invalidArgumentException(message: String?)
    case resourceNotFoundException(message: String?)
    case resourceInUseException(message: String?)
    case notAuthorizedException(message: String?)
    case versionMismatchException(message: String?)
    case invalidResourceFormatException(message: String?)
    case tagsPerResourceExceededLimitException(message: String?)
    case accountStreamLimitExceededException(message: String?)
    case deviceStreamLimitExceededException(message: String?)
    case invalidDeviceException(message: String?)
}

extension KinesisVideoErrorType {
    public init?(errorCode: String, message: String?){
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "ClientLimitExceededException":
            self = .clientLimitExceededException(message: message)
        case "InvalidArgumentException":
            self = .invalidArgumentException(message: message)
        case "ResourceNotFoundException":
            self = .resourceNotFoundException(message: message)
        case "ResourceInUseException":
            self = .resourceInUseException(message: message)
        case "NotAuthorizedException":
            self = .notAuthorizedException(message: message)
        case "VersionMismatchException":
            self = .versionMismatchException(message: message)
        case "InvalidResourceFormatException":
            self = .invalidResourceFormatException(message: message)
        case "TagsPerResourceExceededLimitException":
            self = .tagsPerResourceExceededLimitException(message: message)
        case "AccountStreamLimitExceededException":
            self = .accountStreamLimitExceededException(message: message)
        case "DeviceStreamLimitExceededException":
            self = .deviceStreamLimitExceededException(message: message)
        case "InvalidDeviceException":
            self = .invalidDeviceException(message: message)
        default:
            return nil
        }
    }
}
