// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

/// Error enum for QuickSight
public enum QuickSightErrorType: AWSErrorType {
    case accessDeniedException(message: String?)
    case invalidParameterValueException(message: String?)
    case resourceNotFoundException(message: String?)
    case throttlingException(message: String?)
    case invalidNextTokenException(message: String?)
    case preconditionNotMetException(message: String?)
    case internalFailureException(message: String?)
    case resourceUnavailableException(message: String?)
    case resourceExistsException(message: String?)
    case limitExceededException(message: String?)
    case domainNotWhitelistedException(message: String?)
    case quickSightUserNotFoundException(message: String?)
    case identityTypeNotSupportedException(message: String?)
    case sessionLifetimeInMinutesInvalidException(message: String?)
    case unsupportedUserEditionException(message: String?)
}

extension QuickSightErrorType {
    public init?(errorCode: String, message: String?){
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "AccessDeniedException":
            self = .accessDeniedException(message: message)
        case "InvalidParameterValueException":
            self = .invalidParameterValueException(message: message)
        case "ResourceNotFoundException":
            self = .resourceNotFoundException(message: message)
        case "ThrottlingException":
            self = .throttlingException(message: message)
        case "InvalidNextTokenException":
            self = .invalidNextTokenException(message: message)
        case "PreconditionNotMetException":
            self = .preconditionNotMetException(message: message)
        case "InternalFailureException":
            self = .internalFailureException(message: message)
        case "ResourceUnavailableException":
            self = .resourceUnavailableException(message: message)
        case "ResourceExistsException":
            self = .resourceExistsException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "DomainNotWhitelistedException":
            self = .domainNotWhitelistedException(message: message)
        case "QuickSightUserNotFoundException":
            self = .quickSightUserNotFoundException(message: message)
        case "IdentityTypeNotSupportedException":
            self = .identityTypeNotSupportedException(message: message)
        case "SessionLifetimeInMinutesInvalidException":
            self = .sessionLifetimeInMinutesInvalidException(message: message)
        case "UnsupportedUserEditionException":
            self = .unsupportedUserEditionException(message: message)
        default:
            return nil
        }
    }
}
