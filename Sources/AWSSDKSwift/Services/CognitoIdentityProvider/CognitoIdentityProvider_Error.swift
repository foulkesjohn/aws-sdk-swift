// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

/// Error enum for CognitoIdentityProvider
public enum CognitoIdentityProviderErrorType: AWSErrorType {
    case resourceNotFoundException(message: String?)
    case invalidParameterException(message: String?)
    case tooManyRequestsException(message: String?)
    case notAuthorizedException(message: String?)
    case internalErrorException(message: String?)
    case userNotFoundException(message: String?)
    case passwordResetRequiredException(message: String?)
    case userNotConfirmedException(message: String?)
    case invalidUserPoolConfigurationException(message: String?)
    case usernameExistsException(message: String?)
    case invalidPasswordException(message: String?)
    case codeDeliveryFailureException(message: String?)
    case unexpectedLambdaException(message: String?)
    case userLambdaValidationException(message: String?)
    case invalidLambdaResponseException(message: String?)
    case preconditionNotMetException(message: String?)
    case invalidSmsRoleAccessPolicyException(message: String?)
    case invalidSmsRoleTrustRelationshipException(message: String?)
    case unsupportedUserStateException(message: String?)
    case unsupportedIdentityProviderException(message: String?)
    case userPoolAddOnNotEnabledException(message: String?)
    case invalidEmailRoleAccessPolicyException(message: String?)
    case aliasExistsException(message: String?)
    case limitExceededException(message: String?)
    case userImportInProgressException(message: String?)
    case softwareTokenMFANotFoundException(message: String?)
    case groupExistsException(message: String?)
    case codeMismatchException(message: String?)
    case expiredCodeException(message: String?)
    case tooManyFailedAttemptsException(message: String?)
    case mFAMethodNotFoundException(message: String?)
    case concurrentModificationException(message: String?)
    case scopeDoesNotExistException(message: String?)
    case invalidOAuthFlowException(message: String?)
    case enableSoftwareTokenMFAException(message: String?)
    case userPoolTaggingException(message: String?)
    case duplicateProviderException(message: String?)
}

extension CognitoIdentityProviderErrorType {
    public init?(errorCode: String, message: String?){
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "ResourceNotFoundException":
            self = .resourceNotFoundException(message: message)
        case "InvalidParameterException":
            self = .invalidParameterException(message: message)
        case "TooManyRequestsException":
            self = .tooManyRequestsException(message: message)
        case "NotAuthorizedException":
            self = .notAuthorizedException(message: message)
        case "InternalErrorException":
            self = .internalErrorException(message: message)
        case "UserNotFoundException":
            self = .userNotFoundException(message: message)
        case "PasswordResetRequiredException":
            self = .passwordResetRequiredException(message: message)
        case "UserNotConfirmedException":
            self = .userNotConfirmedException(message: message)
        case "InvalidUserPoolConfigurationException":
            self = .invalidUserPoolConfigurationException(message: message)
        case "UsernameExistsException":
            self = .usernameExistsException(message: message)
        case "InvalidPasswordException":
            self = .invalidPasswordException(message: message)
        case "CodeDeliveryFailureException":
            self = .codeDeliveryFailureException(message: message)
        case "UnexpectedLambdaException":
            self = .unexpectedLambdaException(message: message)
        case "UserLambdaValidationException":
            self = .userLambdaValidationException(message: message)
        case "InvalidLambdaResponseException":
            self = .invalidLambdaResponseException(message: message)
        case "PreconditionNotMetException":
            self = .preconditionNotMetException(message: message)
        case "InvalidSmsRoleAccessPolicyException":
            self = .invalidSmsRoleAccessPolicyException(message: message)
        case "InvalidSmsRoleTrustRelationshipException":
            self = .invalidSmsRoleTrustRelationshipException(message: message)
        case "UnsupportedUserStateException":
            self = .unsupportedUserStateException(message: message)
        case "UnsupportedIdentityProviderException":
            self = .unsupportedIdentityProviderException(message: message)
        case "UserPoolAddOnNotEnabledException":
            self = .userPoolAddOnNotEnabledException(message: message)
        case "InvalidEmailRoleAccessPolicyException":
            self = .invalidEmailRoleAccessPolicyException(message: message)
        case "AliasExistsException":
            self = .aliasExistsException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "UserImportInProgressException":
            self = .userImportInProgressException(message: message)
        case "SoftwareTokenMFANotFoundException":
            self = .softwareTokenMFANotFoundException(message: message)
        case "GroupExistsException":
            self = .groupExistsException(message: message)
        case "CodeMismatchException":
            self = .codeMismatchException(message: message)
        case "ExpiredCodeException":
            self = .expiredCodeException(message: message)
        case "TooManyFailedAttemptsException":
            self = .tooManyFailedAttemptsException(message: message)
        case "MFAMethodNotFoundException":
            self = .mFAMethodNotFoundException(message: message)
        case "ConcurrentModificationException":
            self = .concurrentModificationException(message: message)
        case "ScopeDoesNotExistException":
            self = .scopeDoesNotExistException(message: message)
        case "InvalidOAuthFlowException":
            self = .invalidOAuthFlowException(message: message)
        case "EnableSoftwareTokenMFAException":
            self = .enableSoftwareTokenMFAException(message: message)
        case "UserPoolTaggingException":
            self = .userPoolTaggingException(message: message)
        case "DuplicateProviderException":
            self = .duplicateProviderException(message: message)
        default:
            return nil
        }
    }
}
